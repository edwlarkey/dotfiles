" Edward Larkey's vimrc
"
" I dedicate this to my wonderful wife, Natasha. Thanks for all of your
" support.
"
" Snippets were taken from many places over the years.
"
" Organization was inspired by: https://github.com/gregstallings/vimfiles
"
" =============================================================================
" Initialization {{{1
" =============================================================================

" Clear autocmds
autocmd!

set nocompatible    " Use Vim settings, rather than Vi settings

filetype off        "required

" =============================================================================
" Plugins {{{1
" =============================================================================
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-repeat'
Plug 'godlygeek/tabular'
Plug 'chriskempson/base16-vim'
Plug 'kien/rainbow_parentheses.vim'
Plug 'mhinz/vim-grepper'
Plug 'w0rp/ale'
" Plug '~/git/ale'
Plug 'maralla/completor.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'edwlarkey/vim-toggler'
Plug 'esneider/YUNOcommit.vim'
Plug 'airblade/vim-gitgutter'
Plug 'Valloric/MatchTagAlways'
Plug 'jmcantrell/vim-virtualenv', { 'for': 'python' }

"""""""""""""""""""""""""""""""""""""""
" Syntax Plugins
"""""""""""""""""""""""""""""""""""""""
Plug 'edwlarkey/vim-textcal'
" Plug 'othree/html5-syntax.vim', { 'for': ['html', 'php'] }
" Plug 'pearofducks/ansible-vim'

call plug#end()


" =============================================================================
" Functions {{{1
" =============================================================================
function! Preserve(command)
  " Preparation save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Format HTML
function! FormatHTML()
  set ft=html
  " remove trailing spaces
  call Preserve("%s/\\s\\+$//e")
  " tabs -> spaces
  call Preserve("retab")
  " re indent the file correctly
  call Preserve("normal gg=G")
endfunction

fun! VexSize(vex_width)
  execute "vertical resize" . a:vex_width
  set winfixwidth
  call NormalizeWidths()
endf

fun! NormalizeWidths()
  let eadir_pref = &eadirection
  set eadirection=hor
  set equalalways! equalalways!
  let &eadirection = eadir_pref
endf

function! VexOpen(dir)
  let g:netrw_browse_split=4    " open files in previous window
  let vex_width = 25

  execute "Vexplore " . a:dir
  let t:vex_buf_nr = bufnr("%")
  wincmd H

  call VexSize(vex_width)
endf

function! VexClose()
  let cur_win_nr = winnr()
  let target_nr = ( cur_win_nr == 1 ? winnr("#") : cur_win_nr )

  1wincmd w
  close
  unlet t:vex_buf_nr

  execute (target_nr - 1) . "wincmd w"
  call NormalizeWidths()
endf

function! VexToggle(dir)
  if exists("t:vex_buf_nr")
    call VexClose()
  else
    call VexOpen(a:dir)
  endif
endf

" =============================================================================
" General Config {{{1
" =============================================================================

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Use <SPACE> as leader
let mapleader=" "
let maplocalleader=","

filetype plugin indent on
" Backspace over everything in insert mode
set backspace=indent,eol,start

" Tags
set tags=./tags,tags,~/.worktags;

" Spelling file
set spellfile+=~/onedrive/spellfile.add

""
"" Whitespace
""

"indentation
set expandtab     " Tab in insert mode will produce spaces
set tabstop=2     " Width of a tab
set shiftwidth=2  " Width of reindent operations and auto indentation
set softtabstop=2 " Set spaces for tab in insert mode
set autoindent    " Enable auto indentation
set copyindent    " Copy indentation from source
set smarttab
set nowrap        " Don't wrap lines

" Tabs for various file types.
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
autocmd Filetype html setlocal ts=2 sw=2 expandtab
autocmd Filetype python setlocal ts=4 sw=4 expandtab
autocmd Filetype php setlocal ts=4 sw=4 expandtab
autocmd Filetype css setlocal ts=4 sw=4 expandtab
autocmd Filetype scss setlocal ts=4 sw=4 expandtab
autocmd Filetype snippets setlocal ts=4 sw=4 expandtab
autocmd Filetype markdown,mkd,md setlocal ts=4 sw=4 expandtab
autocmd Filetype perl setlocal ts=4 sw=4 expandtab

" Invisible characters
set list
set listchars=tab:>.,trail:Â·,extends:#,nbsp:.
autocmd filetype html,xml set listchars-=tab:>.

" No Folding by default
"set nofoldenable


""
"" Joining
""

" Use only 1 space after "." when joining lines instead of 2
set nojoinspaces

" Joining with indents is useless - instead join and delete spaces
nnoremap gJ Jdiw

" Don't reset cursor to start of line when moving around
set nostartofline

" =============================================================================
" Appearance {{{1
" =============================================================================

set cursorline      " Highlight current line
set scrolloff=5     " Keep more buffer context when scrolling
set cmdheight=1     " Set command line height (default)
set title           " Show the filename in the window titlebar
set t_Co=16         " 256 colors
set background=dark " Dark background
set noerrorbells    " Disable error bells
set number          " Show line numbers
set relativenumber  " Relative numbering
syntax on
syntax enable

""
"" Statusline
""

set noruler
set laststatus=2
set statusline=
set statusline+=%t\       "tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, "file encoding
set statusline+=%{&ff}]\  "file format
set statusline+=%y\      "filetype
set statusline+=%h\      "help file flag
set statusline+=%m\      "modified flag
set statusline+=%r\      "read only flag
set statusline+=%=      "left/right separator
set statusline+=line:%l/%L\    "cursor line/total lines
set statusline+=col:%c\     "cursor column
set statusline+=\ %P    "percent through file

""
"" Colorscheme and colorcolumn
""

" let g:solarized_termcolors=16
let base16colorspace=256
try
  colorscheme base16-eighties
catch
  colorscheme default
endtry

" dont display color column if it doesn't support it
if v:version > 703
  let &colorcolumn="80,".join(range(120,999),",")
endif


""
"" Fuzzy finding
""
set path+=~/txt/**
set path+=**

" Make tab completion for files/buffers act like bash
set wildmenu

" Use emacs-style tab completion when selecting files, etc
set wildmode=longest,list

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore node modules
set wildignore+=*/node_modules/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*
set wildignore=*.bak,*.pyc,*.class

""
"" Backup, swap, undo
""
set backup
set backupdir=~/.vim-backup//
set directory=~/.vim-swap//
set undofile
set undodir=~/.vim-undo//
set writebackup

""
"" Search
""
set showmatch  " Show matches
set hlsearch   " Highlight searches
set incsearch  " Highlight dynamically as pattern is typed
set ignorecase " Make searches case-insensitive...
set smartcase  " ...unless they contain at least one uppercase character

" =============================================================================
" Buffers {{{1
" =============================================================================

" Allow unsaved background buffers and remember marks/undo for them
set hidden

" Auto-reload buffers when files are changed on disk
set autoread

" Left/Right arrow keys change buffers in all modes
noremap <Left> <Esc>:bp<CR>
inoremap <Left> <Esc>:bp<CR>
nnoremap <Left> <Esc>:bp<CR>
vnoremap <Left> <Esc>:bp<CR>

noremap <Right> <Esc>:bn<CR>
inoremap <Right> <Esc>:bn<CR>
nnoremap <Right> <Esc>:bn<CR>
vnoremap <Right> <Esc>:bn<CR>

" =============================================================================
" Registers {{{1
" =============================================================================

" Use the OS clipboard by default
" set clipboard=unnamed

" Copy to X11 primary clipboard
" map <leader>y "*y

" Paste from unnamed register and fix indentation
" nmap <leader>p pV`]=

" Delete to the blackhole register
" nnoremap <leader>x "_x
" nnoremap <leader>d "_dd

" =============================================================================
" Filetypes and Custom Autocmds {{{1
" =============================================================================

au BufRead *.php set ft=html.php.laravel
au BufNewFile *.php set ft=html.php.laravel
au BufRead *.py set ft=python
au BufNewFile *.py set ft=python
au BufRead *.scss set ft=css.scss
au BufNewFile *.scss set ft=css.scss
au BufRead *.jira set ft=jira
au BufNewFile *.jira set ft=jira

"Spelling
autocmd FileType gitcommit,mail,md,markdown,mkd,jira,tex set spell

" Grep quickfix
autocmd QuickFixCmdPost *grep* cwindow

"Markdown files textwidth
au BufRead,BufNewFile *.md setlocal textwidth=79
au BufRead,BufNewFile *.md setlocal textwidth=79
au BufRead,BufNewFile *.md,*.markdown setlocal foldlevel=1
" au BufRead,BufNewFile *.md,*.markdown setlocal fdm=syntax
autocmd FileType markdown set foldmethod=syntax

" PyLint
" autocmd FileType python set makeprg=pylint\ --reports=n\ --msg-template=\"{path}:{line}:\ {msg_id}\ {symbol},\ {obj}\ {msg}\"\ %:p
" autocmd FileType python set errorformat=%f:%l:\ %m

" LaTeX
au BufRead,BufNewFile *.tex setlocal textwidth=79
au BufRead,BufNewFile *.tex setlocal textwidth=79
" autocmd FileType tex setlocal makeprg=pdflatex\ '%'

" Make on write
" autocmd BufWritePost *.py Make

" QuickFix on make
"autocmd QuickFixCmdPost * copen

" Comments
autocmd FileType gitcommit set commentstring=#\ %s

" Completion
set completeopt=longest,menuone,preview
set omnifunc=syntaxcomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
autocmd InsertLeave * if pumvisible() == 0|pclose|endif


" If you prefer the Omni-Completion tip window to close when a selection is
" " made, these lines close it on movement in insert mode or when leaving
" " insert mode
"autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

inoremap <s-tab> <c-x><c-o>




" =============================================================================
" Plugin Settings and Mappings {{{1
" =============================================================================

" Stop that stupid window
map q: :q

" dotoo
let g:dotoo#agenda#files = ['~/txt/dotoo/*.dotoo']

" org
:let g:org_agenda_files=['~/txt/org/*.org']

" Toggler
:nnoremap <leader>t :Toggle<CR>
let g:toggler_keywords = [
  \ ['TODO', 'DOING', 'DONE'],
  \ ['True', 'False'],
  \ ['YES', 'NO'],
  \ ['\[ \]', '\[x\]'],
  \ ['x', '/'],
  \]


" Fugititve
" :map <leader>c :Gcommit<CR>
" :map <leader>g :Gwrite<CR>

" NERDTree
" map <leader>n :NERDTreeToggle<CR>
" Netrw
" map <leader>n :Vexplore<CR>
" map <leader>n :vsplit .<CR>
" map <leader>n :vsplit .<CR>
" open from current directory
nnoremap <leader>n :call VexToggle(getcwd())<CR>
let g:netrw_liststyle= 3
" open from current file
" nnoremap <leader>n :call VexToggle("")<CR>

" FZF
" nnoremap <leader>o :FZF<CR>

" syntastic
" let g:syntastic_check_on_open=1
" let g:syntastic_check_on_wq=0
" let g:syntastic_mode_map = { 'mode': 'passive' }
" let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']
" let g:syntastic_perl_checkers=['perl', 'perlcritic', 'podchecker']
" let g:syntastic_enable_perl_checker=1
" let g:syntastic_html_tidy_ignore_errors=['proprietary attribute']
" let g:syntastic_enable_python_checker=0
" let g:syntastic_python_checkers=['pylint', 'flake8']

" ALE
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let python_version_2 = 0
let python_highlight_all = 1

"  Parentheses colours using Solarized
let g:rbpt_colorpairs = [
\ [ '13', '#6c71c4'],
\ [ '5',  '#d33682'],
\ [ '1',  '#dc322f'],
\ [ '9',  '#cb4b16'],
\ [ '3',  '#b58900'],
\ [ '2',  '#859900'],
\ [ '6',  '#2aa198'],
\ [ '4',  '#268bd2'],
\ ]
if exists('RainbowParenthesesToggle')
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces
endif
" =============================================================================
" Commands {{{1
" =============================================================================

command -nargs=1 Note :e ~/txt/notes/<args>.md

" =============================================================================
" General Keybindings {{{1
" =============================================================================

" quick vimrc editing
:nnoremap <leader>v :e $MYVIMRC<cr>
autocmd BufWritePost .vimrc source %

" Make
nmap <leader>m :Make<CR>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" go to next line on screen
nnoremap j gj
nnoremap k gk

" Disable up/down arrow keys
" noremap <up> <nop>
" noremap <down> <nop>
" nnoremap <up> <nop>
" nnoremap <down> <nop>
" vnoremap <up> <nop>
" vnoremap <down> <nop>
" inoremap <up> <nop>
" inoremap <down> <nop>

" delete trailing spaces
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
" retab!!
nmap <LEADER><TAB> :call Preserve("retab")<CR>
nmap <F9> :call FormatHTML()<CR>
nmap _= :call Preserve("normal gg=G")<CR>

" no autodindent with F2
set pastetoggle=<F2>

" gidt to insert timestamp
nmap gidt a<C-R>=strftime("%Y-%m-%d %H:%M")<CR><Esc>
imap gidt <C-R>=strftime("%Y-%m-%d %H:%M")<CR>

" gid to insert date
nmap gid a<C-R>=strftime("%Y-%m-%d")<CR><Esc>
imap gid <C-R>=strftime("%Y-%m-%d")<CR>

"Fast filetype switching
map <leader>1 :set ft=php<CR>
map <leader>2 :set ft=html<CR>

" Folding on and off
nnoremap <leader>f :set nofoldenable<CR>
nnoremap <leader>fo :set foldenable<CR>

" =============================================================================
" MISC {{{1
" =============================================================================

" GUI font
set gfn=Anonymous\ Pro\ for\ Powerline:h16

"
" Check for local modifications for env specific settings
"

if !empty(glob("~/.vimrc.local"))
  source ~/.local.vimrc
endif
