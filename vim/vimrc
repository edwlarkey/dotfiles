" Edward Larkey's vimrc
"
" Snippets were taken from many places over the years.
"
" Clear autocmds
autocmd!

set nocompatible    " Use Vim settings, rather than Vi settings

filetype off        "required
let g:ale_completion_enabled = 1

" =============================================================================
" Plugins {{{1
" =============================================================================
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'dense-analysis/ale'
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
Plug 'christoomey/vim-tmux-navigator'
Plug 'edwlarkey/vim-toggler'
Plug 'airblade/vim-gitgutter'
Plug 'morhetz/gruvbox'
Plug 'sonph/onehalf', {'rtp': 'vim/'}
Plug 'hashivim/vim-terraform'
Plug 'juliosueiras/vim-terraform-completion'
Plug 'jmcantrell/vim-virtualenv', { 'for': 'python' }
Plug 'freitass/todo.txt-vim', { 'for': 'txt' }
Plug 'lervag/vimtex', { 'for': 'tex' }
Plug 'fatih/vim-go'
" Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}

"""""""""""""""""""""""""""""""""""""""
" Syntax Plugins
"""""""""""""""""""""""""""""""""""""""
Plug 'edwlarkey/vim-textcal'

call plug#end()

if !empty(glob("~/.vim/functions.vim"))
  source ~/.vim/functions.vim
endif

" =============================================================================
" Snippets {{{1
" =============================================================================
" Read an empty HTML template and move cursor to title
nnoremap ,html :-1read $HOME/.vim/templates/html<CR>4jwf>a


" =============================================================================
" General Config {{{1
" =============================================================================

set encoding=utf-8 nobomb " Use UTF-8 without BOM

" Use <SPACE> as leader
let mapleader=" "
let maplocalleader=","

filetype plugin indent on

set backspace=indent,eol,start                                               " Backspace over everything in insert mode
set tags=./tags,tags;                                                        " Tags
set spellfile+=~/Dropbox/spell/en.utf-8.add                                  " Spelling file
set hidden                                                                   " Allow unsaved background buffers and remember marks/undo for them
set autoread                                                                 " Auto-reload buffers when files are changed on disk
set nojoinspaces                                                             " Use only 1 space after ' . ' when joining lines instead of 2
set nostartofline                                                            " Don't reset cursor to start of line when moving around
set wildmenu                                                                 " Make tab completion for files/buffers act like bash
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem          " Disable output and VCS files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz                      " Disable archive files
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/* " Ignore bundler and sass cache
set wildignore+=*/node_modules/*                                             " Ignore node modules

" Disable temp and backup files
set wildignore+=*.swp,*~,._*
set wildignore=*.bak,*.pyc,*.class

""
"" Backup, swap, undo
""
set backup
set backupdir=~/.vim-backup//
set directory=~/.vim-swap//
set undofile
set undodir=~/.vim-undo//
set writebackup

""
"" Search
""
set showmatch  " Show matches
set hlsearch   " Highlight searches
set incsearch  " Highlight dynamically as pattern is typed
set ignorecase " Make searches case-insensitive...
set smartcase  " ...unless they contain at least one uppercase character

if executable("ag")
  set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" =============================================================================
" Appearance {{{1
" =============================================================================

" set cursorline    " Highlight current line
" set t_Co=256      " 256 colors
set scrolloff=5     " Keep more buffer context when scrolling
set cmdheight=1     " Set command line height (default)
set title           " Show the filename in the window titlebar
set termguicolors
set noerrorbells    " Disable error bells
set vb t_vb=        " Disable bells
set number          " Show line numbers
set relativenumber  " Relative numbering
syntax on

""
"" Statusline
""

set noruler
set laststatus=2
set statusline=
set statusline+=%t\                             " tail of the filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, " file encoding
set statusline+=%{&ff}]\                        " file format
set statusline+=%y\                             " filetype
set statusline+=%h\                             " help file flag
set statusline+=%m\                             " modified flag
set statusline+=%r\                             " read only flag
set statusline+=%=                              " left/right separator
set statusline+=line:%l/%L\                     " cursor line/total lines
set statusline+=col:%c\                         " cursor column
set statusline+=\ %P                            " percent through file

""
"" Colorscheme and colorcolumn
""

if !empty(glob("~/light"))
  set background=light
  colorscheme onehalflight
else
  set background=dark
  colorscheme gruvbox
endif

" dont display color column if it doesn't support it
if v:version > 703
  let &colorcolumn="80,".join(range(120,999),",")
endif

""
"" Whitespace
""

" Indentation
set expandtab     " Tab in insert mode will produce spaces
" set tabstop=2     " Width of a tab
set shiftwidth=2  " Width of reindent operations and auto indentation
set softtabstop=2 " Set spaces for tab in insert mode
set autoindent    " Enable auto indentation
set copyindent    " Copy indentation from source
set smarttab
set nowrap        " Don't wrap lines

" Invisible characters
set list
set listchars=tab:>·,trail:·,extends:#,nbsp:.

" =============================================================================
" Registers
" =============================================================================

" Use the OS clipboard by default
" set clipboard=unnamed

" Copy to unnamed register
map <leader>y "*y

" Paste from unnamed register and fix indentation
nmap <leader>p o<ESC>"*pV`]=
nmap <leader>P o<ESC>"*p

" Delete to the blackhole register
" nnoremap <leader>x "_x
" nnoremap <leader>d "_dd

" inoremap <s-tab> <c-x><c-o>

" =============================================================================
" General Keybindings
" =============================================================================

" stop the command window
map q: :q

" Joining with indents is useless - instead join and delete spaces
nnoremap gJ Jdiw

" C-h and C-l keys change buffers in all modes
noremap <C-h> <Esc>:bp<CR>
inoremap <C-h> <Esc>:bp<CR>
nnoremap <C-h> <Esc>:bp<CR>
vnoremap <C-h> <Esc>:bp<CR>

noremap <C-l> <Esc>:bn<CR>
inoremap <C-l> <Esc>:bn<CR>
nnoremap <C-l> <Esc>:bn<CR>
vnoremap <C-l> <Esc>:bn<CR>

" quick vimrc editing
" The autocmd should be in another secion, but I like it all together
:nnoremap <leader>v :e $MYVIMRC<cr>
autocmd BufWritePost .vimrc source %

" Move item to bottom and append timestamp
nnoremap <leader>mv ddGpA completed:<C-R>=strftime("%Y-%m-%d %H:%M")<CR><Esc>``

" Make
nmap <leader>m :Make<CR>

" go to next line on screen
nnoremap j gj
nnoremap k gk

" Disable arrow keys
noremap <up> <nop>
nnoremap <up> <nop>
vnoremap <up> <nop>
inoremap <up> <nop>
noremap <down> <nop>
nnoremap <down> <nop>
vnoremap <down> <nop>
inoremap <down> <nop>
noremap <left> <nop>
nnoremap <left> <nop>
vnoremap <left> <nop>
inoremap <left> <nop>
noremap <right> <nop>
nnoremap <right> <nop>
vnoremap <right> <nop>
inoremap <right> <nop>

" delete trailing spaces
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
" retab!!
nmap <LEADER><TAB> :call Preserve("retab")<CR>
nmap <F9> :call FormatHTML()<CR>
nmap _= :call Preserve("normal gg=G")<CR>

" no autodindent with F2
set pastetoggle=<F2>

" gidt to insert timestamp
nmap gidt a<C-R>=strftime("%Y-%m-%d %H:%M")<CR><Esc>
imap gidt <C-R>=strftime("%Y-%m-%d %H:%M")<CR>

" gid to insert date
nmap gid a<C-R>=strftime("%Y-%m-%d")<CR><Esc>
imap gid <C-R>=strftime("%Y-%m-%d")<CR>

" =============================================================================
" Filetypes and Custom Autocmds {{{1
" =============================================================================

" Tabs for various file types.
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
autocmd Filetype html setlocal ts=2 sw=2 expandtab
autocmd Filetype python setlocal ts=4 sw=4 expandtab
autocmd Filetype php setlocal ts=4 sw=4 expandtab
autocmd Filetype css setlocal ts=4 sw=4 expandtab
autocmd Filetype scss setlocal ts=4 sw=4 expandtab
autocmd Filetype snippets setlocal ts=4 sw=4 expandtab
autocmd Filetype markdown,mkd,md setlocal ts=4 sw=4 expandtab
autocmd Filetype perl setlocal ts=4 sw=4 expandtab
autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0
autocmd FileType calendar set noexpandtab shiftwidth=8 softtabstop=0

augroup go
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd FileType go set listchars=tab:\ \ 
augroup END

au BufRead,BufNewFile *.php set ft=html.php
au BufRead,BufNewFile *.py set ft=python
au BufRead,BufNewFile *.scss set ft=css
au BufRead,BufNewFile *.jira set ft=jira
au BufRead,BufNewFile *.rb set ft=ruby.chef
au BufRead,BufNewFile */cloudformation/**/*.yml,*/cloudformation/**/*.yaml set ft=yaml.cloudformation

"Spelling
autocmd FileType gitcommit,mail,md,markdown,mkd,jira,tex,vimwiki set spell

" Grep quickfix
autocmd QuickFixCmdPost *grep* cwindow

"Markdown files textwidth
augroup markdown
  au BufRead,BufNewFile *.md setlocal textwidth=79
  au FileType markdown setlocal textwidth=79
  au FileType markdown setlocal conceallevel=2
augroup END

" LaTeX
au BufRead,BufNewFile *.tex setlocal textwidth=79
" autocmd FileType tex setlocal makeprg=pdflatex\ '%'

" Comments
autocmd FileType gitcommit set commentstring=#\ %s

" Completion
set completeopt=longest,menuone,preview
set omnifunc=syntaxcomplete#Complete
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP


" If you prefer the Omni-Completion tip window to close when a selection is
" " made, these lines close it on movement in insert mode or when leaving
" " insert mode
"autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" =============================================================================
" Plugin Settings and Mappings {{{1
" =============================================================================

" ALE
let g:ale_fix_on_save = 1
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
set omnifunc=ale#completion#OmniFunc

let g:ale_fixers = {
  \   'python': [
  \       'black',
  \       'add_blank_lines_for_python_control_statements',
  \       'isort',
  \       'yapf',
  \   ],
  \   'terraform': [
  \       'terraform',
  \   ],
  \}

let g:ale_linters = {
      \'go': ['gopls'],
      \'python': ['black', 'pyls'],
      \'sh': ['language_server'],
      \'terraform': ['terraform'],
      \}

" netrw
" open from current directory
nnoremap <leader>n :call VexToggle(getcwd())<CR>
let g:netrw_liststyle= 3
" open from current file
" nnoremap <leader>n :call VexToggle("")<CR>

" Toggler
:nnoremap <F8> :Toggle<CR>
let g:toggler_keywords = [
  \ ['TODO', 'DOING', 'DONE'],
  \ ['True', 'False'],
  \ ['YES', 'NO'],
  \ ['\[ \]', '\[x\]'],
  \ ['x', '/'],
  \]

" vim-go plugin settings
let g:go_fmt_command = "goimports"
let g:go_rename_command = "gopls"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>b <Plug>(go-build)
autocmd FileType go nmap <leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap gie <Plug>(go-iferr)
autocmd FileType go imap gie <ESC><Plug>(go-iferr)2kA

" fzf
nmap <Leader>l :Buffers<CR>
nmap <Leader>f :GFiles<CR>
nmap <Leader>g :GFiles?<CR>
nmap <Leader>d :Files<CR>
nmap <Leader>r :Tags<CR
nmap <Leader>k :call Wiki()<CR>

" vim-autoformat
noremap <F3> :Autoformat<CR>

" Gruvbox
let g:gruvbox_contrast_light = 'hard'
let g:gruvbox_contrast_dark = 'soft'

" Black
let g:black_linelength = 79

" tmux-navigator
let g:tmux_navigator_no_mappings = 1
nmap <silent> <C-w>h :TmuxNavigateLeft<cr>
nmap <silent> <C-w>j :TmuxNavigateDown<cr>
nmap <silent> <C-w>k :TmuxNavigateUp<cr>
nmap <silent> <C-w>l :TmuxNavigateRight<cr>

" easier window navigation with ctrl pressed
nmap <silent> <C-w><C-h> :TmuxNavigateLeft<cr>
nmap <silent> <C-w><C-j> :TmuxNavigateDown<cr>
nmap <silent> <C-w><C-k> :TmuxNavigateUp<cr>
nmap <silent> <C-w><C-l> :TmuxNavigateRight<cr>

" =============================================================================
" Wiki and calendar {{{1
" =============================================================================
let g:text_dir = '$HOME/txt/'
let g:journal_dir = g:text_dir . 'journal/'
nnoremap <leader>w :e $HOME/txt/index.md<cr>
nnoremap <leader>w<leader>c :e +/<C-R>=strftime("%Y-%m-%d")<CR> $HOME/txt/calendar/2020.txt<CR>
nnoremap <leader>w<leader>j :call OpenJournalDate()<CR>
nnoremap <leader>w<leader>y :call OpenJournalDate("yesterday")<CR>
nnoremap <leader>w<leader>l :call AddLink()<CR>
" Next markdown link
nnoremap <tab> :call SearchMarkdownLink('s', 1)<CR>
" Previous markdown link
nnoremap <s-tab> :call SearchMarkdownLink('bs', 1)<CR>

autocmd FileType markdown nmap <buffer> <Enter> <Plug>Markdown_EditUrlUnderCursor

augroup textcal
  autocmd BufRead,BufNewFile */txt/calendar/* set filetype=textcal
  autocmd BufRead,BufNewFile */txt/calendar/* set spell
  autocmd BufRead,BufNewFile */txt/calendar/* set hlsearch
  autocmd BufRead,BufNewFile */txt/calendar/* exe '/'.strftime("%Y-%m-%d")
  autocmd Filetype textcal setlocal ts=16 sw=16 expandtab
augroup END


" Markdown
let g:vim_markdown_folding_disabled = 1

" Check for local settings for env specific settings. e.g. Work specific
" config
"
if !empty(glob("~/.local.vimrc"))
  source ~/.local.vimrc
endif
