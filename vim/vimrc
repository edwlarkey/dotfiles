" Edward Larkey's vimrc
"
" I dedicate this to my wonderful wife, Natasha. Thanks for all of your
" support.
"
" Snippets were taken from many places over the years.
"
" Organization was inspired by: https://github.com/gregstallings/vimfiles
"
" =============================================================================
" Initialization
" =============================================================================

" Clear autocmds
autocmd!


set nocompatible    " Use Vim settings, rather than Vi settings

filetype off        "required

" =============================================================================
" Plugins
" =============================================================================
call plug#begin('~/.vim/plugged')

Plug 'bling/vim-airline'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'altercation/vim-colors-solarized'
Plug 'scrooloose/syntastic'
Plug 'godlygeek/tabular'
Plug 'kien/rainbow_parentheses.vim'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'shawncplus/phpcomplete.vim', { 'for': 'php' }
Plug 'ajh17/VimCompletesMe'
Plug 'christoomey/vim-tmux-navigator'
Plug 'klen/python-mode', { 'for': 'python' }
Plug 'plasticboy/vim-markdown', { 'for': ['markdown', 'mkd', 'md'] }
"Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer' }
" Python plugin bundles
if has('python') || has('python3')
  Plug 'SirVer/ultisnips'
"else
"  Plug "MarcWeber/vim-addon-mw-utils"
"  Plug 'tomtom/tlib_vim'
"  Plug 'garbas/vim-snipmate'
endif

"""""""""""""""""""""""""""""""""""""""
" Syntax Plugins
"""""""""""""""""""""""""""""""""""""""
Plug 'edwlarkey/vim-textcal'
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'html'] }
Plug 'othree/html5-syntax.vim', { 'for': ['html', 'php'] }
Plug 'tpope/vim-haml', { 'for': ['scss', 'sass', 'haml'] }
Plug 'hdima/python-syntax', { 'for': 'python' }
Plug 'jelera/vim-javascript-syntax', { 'for': ['html', 'php', 'js', 'javascript'] }
Plug 'jQuery', { 'for': ['html', 'php', 'js', 'javascript'] }

call plug#end()


" =============================================================================
" Functions
" =============================================================================
function! Preserve(command)
  " Preparation save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" function! Tpl(file)
"   if &filetype =~ 'php'
"       let a:dir = 'php'
"   else
"       let a:dir = 'misc'
"   endif
"   exe 'r ~/.vim/snippets/'.a:dir.'/'.a:file
" endfunction

" Template inserts
":command! -nargs=1 T :call Tpl(<f-args>)


" =============================================================================
" General Config
" =============================================================================

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Use <SPACE> as leader
let mapleader=" "
let maplocalleader=","

syntax on
filetype plugin indent on
syntax enable
" Backspace over everything in insert mode
set backspace=indent,eol,start

" Tags
set tags=./tags,tags,~/.worktags;


""
"" Whitespace
""

"indentation
set expandtab     " Tab in insert mode will produce spaces
set tabstop=2     " Width of a tab
set shiftwidth=2  " Width of reindent operations and auto indentation
set softtabstop=2 " Set spaces for tab in insert mode
set autoindent    " Enable auto indentation
set copyindent    " Copy indentation from source
set smarttab
set nowrap        " Don't wrap lines

" Tabs for various file types.
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
autocmd Filetype html setlocal ts=2 sw=2 expandtab
autocmd Filetype php setlocal ts=4 sw=4 expandtab
autocmd Filetype css setlocal ts=4 sw=4 expandtab
autocmd Filetype scss setlocal ts=4 sw=4 expandtab
autocmd Filetype snippets setlocal ts=4 sw=4 expandtab

" Invisible characters
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
autocmd filetype html,xml set listchars-=tab:>.


""
"" Joining
""

" Use only 1 space after "." when joining lines instead of 2
set nojoinspaces

" Joining with indents is useless - instead join and delete spaces
nnoremap gJ Jdiw

" Don't reset cursor to start of line when moving around
set nostartofline

" =============================================================================
" Appearance
" =============================================================================

set cursorline      " Highlight current line
set scrolloff=5     " Keep more buffer context when scrolling
set cmdheight=1     " Set command line height (default)
set title           " Show the filename in the window titlebar
set t_Co=16         " 256 colors
set background=dark " Dark background
syntax on           " Enable syntax highlighting
"set visualbell
set noerrorbells    " Disable error bells
set number          " Show line numbers
set relativenumber  " Relative numbering

""
"" Colorscheme and colorcolumn
""

let g:solarized_termcolors=16
try
  colorscheme solarized
catch
  colorscheme default
endtry

" dont display color column if it doesn't support it
if v:version > 703
  let &colorcolumn="80,".join(range(120,999),",")
endif


""
"" Wildmode
""

" Make tab completion for files/buffers act like bash
set wildmenu

" Use emacs-style tab completion when selecting files, etc
set wildmode=longest,list

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore node modules
set wildignore+=*/node_modules/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*
set wildignore=*.bak,*.pyc,*.class

" Backup, swap, undo
set backup
set backupdir=~/.vim-backup//
set directory=~/.vim-swap//
set undofile
set undodir=~/.vim-undo//
set writebackup

""
"" Search
""
set showmatch  " Show matches
set hlsearch   " Highlight searches
set incsearch  " Highlight dynamically as pattern is typed
set ignorecase " Make searches case-insensitive...
set smartcase  " ...unless they contain at least one uppercase character

" =============================================================================
" Buffers
" =============================================================================

" Allow unsaved background buffers and remember marks/undo for them
set hidden

" Auto-reload buffers when files are changed on disk
set autoread

" Left/Right arrow keys change buffers in all modes
noremap <Left> <Esc>:bp<CR>
inoremap <Left> <Esc>:bp<CR>
nnoremap <Left> <Esc>:bp<CR>
vnoremap <Left> <Esc>:bp<CR>

noremap <Right> <Esc>:bn<CR>
inoremap <Right> <Esc>:bn<CR>
nnoremap <Right> <Esc>:bn<CR>
vnoremap <Right> <Esc>:bn<CR>

" =============================================================================
" Registers
" =============================================================================

" Use the OS clipboard by default
set clipboard=unnamed

" Copy to X11 primary clipboard
map <leader>y "*y

" Paste from unnamed register and fix indentation
nmap <leader>p pV`]=

" Delete to the blackhole register
nnoremap <leader>x "_x
nnoremap <leader>d "_dd

" =============================================================================
" Filetypes and Custom Autocmds
" =============================================================================

au BufRead *.php set ft=php.html.laravel
au BufNewFile *.php set ft=php.html.laravel
au BufRead *.py set ft=python
au BufNewFile *.py set ft=python
au BufRead *.scss set ft=css.scss
au BufNewFile *.scss set ft=css.scss

"Markdown files textwidth
au BufRead,BufNewFile *.md setlocal textwidth=79
au BufRead,BufNewFile *.md setlocal textwidth=79
au BufRead,BufNewFile *.md,*.markdown setlocal foldlevel=1

" Comments
autocmd FileType gitcommit set commentstring=#\ %s

" Completion
set completeopt=longest,menuone,preview
set omnifunc=syntaxcomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
autocmd InsertLeave * if pumvisible() == 0|pclose|endif


" If you prefer the Omni-Completion tip window to close when a selection is
" " made, these lines close it on movement in insert mode or when leaving
" " insert mode
"autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

inoremap <s-tab> <c-x><c-o>




" =============================================================================
" Plugin Settings and Mappings
" =============================================================================

" HardTime
" let g:hardtime_default_on = 1
" let g:hardtime_timeout = 2000
" let g:list_of_normal_keys = ["h", "j", "k", "l", "-", "+"]
" let g:list_of_visual_keys = ["0"]
" let g:list_of_insert_keys = ["0"]
" let g:hardtime_ignore_buffer_patterns = [ "NERD.*" ]

" Fugititve
:map <leader>c :Gcommit<CR>
:map <leader>g :Gwrite<CR>

" NERDTree
map <leader>n :NERDTreeToggle<CR>

" AIRLINE
set laststatus=2
let g:airline_theme = 'solarized'
let g:airline_powerline_fonts=1
let g:airline_detect_paste=1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled = 1

" CTRLP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nnoremap <leader>o :CtrlP<CR>
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*/vendor/**
set wildignore+=*/blog/**
set wildignore+=*/node_modules/**
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'


" syntastic
let g:syntastic_check_on_open=1
"let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']

"vim-markdown disable folding
let g:vim_markdown_folding_disabled=0

let python_version_2 = 0
let python_highlight_all = 1
let g:syntastic_python_checkers=['pylint','flake8']


" Python plugin config
if has('python') || has('python3')
  let g:ycm_collect_identifiers_from_tags_files = 1
  "UltiSnips
  " ultisnips
  " Trigger configuration. Do not use <tab> if you use
  " https://github.com/Valloric/YouCompleteMe.
  let g:UltiSnipsExpandTrigger="<c-k>"
  let g:UltiSnipsJumpForwardTrigger="<c-k>"
  let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"
endif


"  Parentheses colours using Solarized
let g:rbpt_colorpairs = [
\ [ '13', '#6c71c4'],
\ [ '5',  '#d33682'],
\ [ '1',  '#dc322f'],
\ [ '9',  '#cb4b16'],
\ [ '3',  '#b58900'],
\ [ '2',  '#859900'],
\ [ '6',  '#2aa198'],
\ [ '4',  '#268bd2'],
\ ]
if exists('RainbowParenthesesToggle')
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces
endif

" =============================================================================
" General Keybindings
" =============================================================================

" quick vimrc editing
:nnoremap <leader>v :e $MYVIMRC<cr>
autocmd BufWritePost .vimrc source %

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" go to next line on screen
nnoremap j gj
nnoremap k gk

" Command-space to C-N
inoremap <D-x> <C-x>
inoremap <D-Space> <C-n>


" Disable up/down arrow keys
noremap <up> <nop>
noremap <down> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
inoremap <up> <nop>
inoremap <down> <nop>

" delete trailing spaces
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
" retab!!
nmap <LEADER><TAB> :call Preserve("retab")<CR>
nmap _= :call Preserve("normal gg=G")<CR>

" no autodindent with F2
set pastetoggle=<F2>

" gidt to insert timestamp
nmap gidt a<C-R>=strftime("%Y-%m-%d %H:%M")<CR><Esc>
imap gidt <C-R>=strftime("%Y-%m-%d %H:%M")<CR>

" gid to insert date
nmap gid a<C-R>=strftime("%Y-%m-%d")<CR><Esc>
imap gid <C-R>=strftime("%Y-%m-%d")<CR>

"Fast Saving
map <leader>w :w<CR>
map <leader>q :wq<CR>

"Fast filetype switching
map <leader>1 :set ft=php<CR>
map <leader>2 :set ft=html<CR>

" Folding on and off
nnoremap <leader>f :set nofoldenable<CR>
nnoremap <leader>fo :set foldenable<CR>

"Spelling
:nnoremap <leader>s z=
:nnoremap <F5> :setlocal spell! spelllang=en_us<CR>
:inoremap <F5> <C-o>:setlocal spell! spelllang=en_us<CR>
autocmd FileType gitcommit,mail,md,markdown,mkd set spell

" Open splits
nmap vs :vsplit<cr>
nmap sp :split<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""
" MISC
"""""""""""""""""""""""""""""""""""""""""""""""""

" GUI font
set gfn=Anonymous\ Pro\ for\ Powerline:h16

" Laravel fast opens
nmap <leader>lr :e app/Http/routes.php<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""
" Check for local modifications for env specific settings
"""""""""""""""""""""""""""""""""""""""""""""""""

if !empty(glob("~/.vimrc.local"))
  source ~/.local.vimrc
endif
