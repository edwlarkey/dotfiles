set nocompatible               " be iMproved
filetype off        "required

let mapleader=" "

"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"""""""""""""""""""""""""""""""""""""""""""""""""
" BUNDLES
"""""""""""""""""""""""""""""""""""""""""""""""""
" let Vundle manage Vundle, required
Bundle 'gmarik/vundle'
Bundle 'bling/vim-airline'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'altercation/vim-colors-solarized'
Bundle 'scrooloose/syntastic'
Bundle 'godlygeek/tabular'
Bundle "kien/rainbow_parentheses.vim"
Bundle 'mileszs/ack.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'kien/ctrlp.vim'
" Python plugin bundles
if has('python') || has('python3')
  Bundle 'SirVer/ultisnips'
  Bundle 'Valloric/YouCompleteMe'
else
  Bundle "MarcWeber/vim-addon-mw-utils"
  Bundle "tomtom/tlib_vim"
  Bundle 'garbas/vim-snipmate'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax Bundles
"""""""""""""""""""""""""""""""""""""""""""""""""
Bundle 'edwlarkey/vim-textcal'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'othree/html5-syntax.vim'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-haml'
Bundle 'hdima/python-syntax'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'jQuery'

"""""""""""""""""""""""""""""""""""""""""""""""""
" FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""
function! Preserve(command)
  " Preparation save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""
" GENERAL CONFIG
"""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
syntax on
filetype plugin indent on
syntax enable
set backspace=2
set nu
set hidden
set cursorline
set visualbell
set noerrorbells
set tags=./tags,tags,~/.worktags;
set mouse=a

"indentation
:set ts=2
:set sw=2
:set expandtab
set autoindent
set copyindent
set smarttab
set nowrap

"Tabs for various file types.
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
autocmd Filetype html setlocal ts=2 sw=2 expandtab
autocmd Filetype php setlocal ts=4 sw=4 expandtab
autocmd Filetype css setlocal ts=4 sw=4 expandtab
autocmd Filetype scss setlocal ts=4 sw=4 expandtab
autocmd Filetype snippets setlocal ts=4 sw=4


" Search
set showmatch
set ignorecase
set smartcase
set hlsearch
set incsearch

" Relative number
set relativenumber
set wildignore=*.swp,*.bak,*.pyc,*.class

" Backup, swap, undo
set backup
set backupdir=~/.vim-backup//
set directory=~/.vim-swap//
set undofile
set undodir=~/.vim-undo//
set writebackup

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
autocmd filetype html,xml set listchars-=tab:>.

"File type specifics
au BufRead *.php set ft=php.html.laravel
au BufNewFile *.php set ft=php.html.laravel
au BufRead *.py set ft=python
au BufNewFile *.py set ft=python
au BufRead *.scss set ft=css.scss
au BufNewFile *.scss set ft=css.scss
"Markdown files textwidth
au BufRead,BufNewFile *.md setlocal textwidth=79
au BufRead,BufNewFile *.md setlocal textwidth=79



"""""""""""""""""""""""""""""""""""""""""""""""""
"color scheme
"""""""""""""""""""""""""""""""""""""""""""""""""
let g:solarized_termtrans = 1
set background=dark
"let g:solarized_termcolors=16
set t_Co=256
try
    colorscheme solarized
catch
    colorscheme default
endtry

" dont display color column if it doesn't support it
if v:version > 703
    let &colorcolumn="80,".join(range(120,999),",")
endif



"""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN CONFIGS
"""""""""""""""""""""""""""""""""""""""""""""""""

" Fugititve
:map <leader>c :Gcommit<CR>
:map <leader>g :Gwrite<CR>

" NERDTree
map <leader>n :NERDTreeToggle<CR>

" AIRLINE
set laststatus=2
let g:airline_theme = 'solarized'
let g:airline_powerline_fonts=1
let g:airline_detect_paste=1
let g:airline_enable_branch=1
let g:airline_enable_syntastic=1
let g:airline#extensions#syntastic#enabled = 1

" CTRLP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nnoremap <leader>o :CtrlP<CR>
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set wildignore+=*/vendor/**
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'


" syntastic
let g:syntastic_check_on_open=1
"let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']

"vim-markdown disable folding
let g:vim_markdown_folding_disabled=1

"let python_version_2 = 0
let python_highlight_all = 1
let g:syntastic_python_checkers=['pylint','flake8']

" If you prefer the Omni-Completion tip window to close when a selection is
" " made, these lines close it on movement in insert mode or when leaving
" " insert mode
"autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Python plugin config
if has('python') || has('python3')
 " YCM
  let g:ycm_collect_identifiers_from_tags_files = 1
  let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
  let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
  "UltiSnips
  " ultisnips
  " Trigger configuration. Do not use <tab> if you use
  " https://github.com/Valloric/YouCompleteMe.
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
else
  " snipMate
  imap <TAB> <Plug>snipMateNextOrTrigger
  smap <TAB> <Plug>snipMateNextOrTrigger
endif


"  Parentheses colours using Solarized
let g:rbpt_colorpairs = [
\ [ '13', '#6c71c4'],
\ [ '5',  '#d33682'],
\ [ '1',  '#dc322f'],
\ [ '9',  '#cb4b16'],
\ [ '3',  '#b58900'],
\ [ '2',  '#859900'],
\ [ '6',  '#2aa198'],
\ [ '4',  '#268bd2'],
\ ]
if exists('RainbowParenthesesToggle')
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
endif

"""""""""""""""""""""""""""""""""""""""""""""""""
" GENERAL KEYBINDINGS
"""""""""""""""""""""""""""""""""""""""""""""""""

" no autodindent with F2
set pastetoggle=<F2>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" fast esacpe
imap jj <esc>

" go to next line on screen
nnoremap j gj
nnoremap k gk

" Left/Right arrow keys change buffers in all modes
noremap <Left> <Esc>:bp<CR>
inoremap <Left> <Esc>:bp<CR>
nnoremap <Left> <Esc>:bp<CR>
vnoremap <Left> <Esc>:bp<CR>

noremap <Right> <Esc>:bn<CR>
inoremap <Right> <Esc>:bn<CR>
nnoremap <Right> <Esc>:bn<CR>
vnoremap <Right> <Esc>:bn<CR>

" Disable up/down arrow keys
noremap <up> <nop>
noremap <down> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
inoremap <up> <nop>
inoremap <down> <nop>

" delete trailing spaces
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
" retab!!
nmap <LEADER><TAB> :call Preserve("retab")<CR>
nmap _= :call Preserve("normal gg=G")<CR>

" F3 to insert timestamp
nmap <F3> a<C-R>=strftime("%Y-%m-%d %a %H:%M")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d %a %H:%M")<CR>

" F4 to insert date
nmap <F4> a<C-R>=strftime("%Y-%m-%d")<CR><Esc>
imap <F4> <C-R>=strftime("%Y-%m-%d")<CR>

"Fast Saving
map <leader>w :w<CR>
map <leader>q :wq<CR>


"Fast filetype switching
map <leader>1 :set ft=php<CR>
map <leader>2 :set ft=html<CR>

"Spelling
:nnoremap <leader>s z=
:nnoremap <F5> :setlocal spell! spelllang=en_us<CR>
:inoremap <F5> <C-o>:setlocal spell! spelllang=en_us<CR>
autocmd FileType mail,md,markdown set spell

" Open splits
nmap vs :vsplit<cr>
nmap sp :split<cr>

"Resize vsplit
nmap <C-v> :vertical resize +5<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""
" MISC
"""""""""""""""""""""""""""""""""""""""""""""""""

" GUI font
set gfn=Anonymous\ Pro\ for\ Powerline:h16

" Laravel fast opens
nmap <leader>lr :e app/Http/routes.php<cr>
