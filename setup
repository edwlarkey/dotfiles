#!/usr/bin/env bash
#
# Sets up my dotfiles
#
# I dedicate this to my wonderful wife, Natasha. Thanks for all of your
# support.
#

set -e

echo ''

info () {
    printf "\r\033[2K  [ \033[00;34m..\033[0m ] %s\n" "$1"
}

user () {
    printf "\r\033[2K  [ \033[00;33m##\033[0m ] %s\n" "$1"
}

success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] %s\n" "$1"
}

fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] %s\n" "$1"
    echo ''
    exit
}

setup_gitconfig () {
    info 'Setup git'

    if [ -f "$HOME/.local.gitconfig" ]; then
      info "$HOME/.local.gitconfig found, deleting"
      rm "$HOME/.local.gitconfig"
    fi

    git config --file "$HOME/.config/git/config" user.name "$git_user_name"
    user "git name: $git_user_name"
    git config --file "$HOME/.config/git/config" user.email "$git_user_email"
    user "git email: $git_user_email"
    git config --file "$HOME/.config/git/config" user.signkey "$git_user_signkey"
    user "git signkey: $git_user_signkey"
    git config --file "$HOME/.config/git/config" commit.gpgsign "$git_commit_gpgsign"
    user "git gpgsign: $git_commit_gpgsign"

    git config --global core.editor vim
    git config  --file "$HOME/.config/git/config" commit.template "$HOME/dotfiles/git/git-commit-template"

    success 'Git setup complete'
}

link_files () {
    info 'Linking files'
    ln -nfs "$HOME/dotfiles/git/gitconfig" "$HOME/.gitconfig"
    success 'git linked'
    ln -nfs "$HOME/dotfiles/vim" "$HOME/.vim"
    ln -nfs "$HOME/dotfiles/vim/vimrc" "$HOME/.vimrc"
    success 'vim linked'
    ln -nfs "$HOME/dotfiles/bin" "$HOME/bin"
    success 'bin linked'
    ln -nfs "$HOME/dotfiles/tmux/tmux.conf" "$HOME/.tmux.conf"
    success 'tmux linked'
    ln -nfs "$HOME/dotfiles/mutt" "$HOME/.mutt"
    success 'mutt linked'
    ln -nfs "$HOME/dotfiles/zsh" "$HOME/.zsh"
    ln -nfs "$HOME/dotfiles/zsh/zlogin" "$HOME/.zlogin"
    ln -nfs "$HOME/dotfiles/zsh/zlogout" "$HOME/.zlogout"
    ln -nfs "$HOME/dotfiles/zsh/zprofile" "$HOME/.zprofile"
    ln -nfs "$HOME/dotfiles/zsh/zshrc" "$HOME/.zshrc"
    ln -nfs "$HOME/dotfiles/zsh/zshenv" "$HOME/.zshenv"
    success 'zsh linked'
    ln -nfs "$HOME/dotfiles/awesome" "$HOME/.config/awesome"
    success 'awesome config linked'
    ln -nfs "$HOME/dotfiles/bspwm" "$HOME/.config/bspwm"
    ln -nfs "$HOME/dotfiles/sxhkd" "$HOME/.config/sxhkd"
    success 'bspwm config linked'
    ln -nfs "$HOME/dotfiles/termite" "$HOME/.config/termite"
    success 'termite config linked'
    ln -nfs "$HOME/dotfiles/xinitrc" "$HOME/.xinitrc"
    success 'xinitrc config linked'
    ln -nfs "$HOME/dotfiles/dunst" "$HOME/.config/dunst"
    success 'dunst config linked'
    ln -nfs "$HOME/dotfiles/khal" "$HOME/.config/khal"
    success 'khal config linked'
    ln -nfs "$HOME/dotfiles/khard" "$HOME/.config/khard"
    success 'khard config linked'
    ln -nfs "$HOME/dotfiles/newsbeuter/" "$HOME/.newsbeuter"
    success 'newsbeuter config linked'
    ln -nfs "$HOME/dotfiles/qutebrowser" "$HOME/.config/qutebrowser"
    success 'qutebrowser config linked'
}

make_dirs () {
    info 'Creating directories'
    mkdir -p "$HOME/.config"
    mkdir -p "$HOME/.config/git"
    mkdir -p "$HOME/.vim-backup"
    mkdir -p "$HOME/.vim-undo"
    mkdir -p "$HOME/.vim-swap"
    success 'vim dirs created'
    mkdir -p "$HOME/git"
    success "$HOME/git created"
}

pull_submodules () {
    cd "$HOME/dotfiles" && git submodule init && git submodule update
    git submodule update --init --recursive
}

install_vim_plugins () {
    info 'Install Vim plugins'
    vim +PlugInstall +qall
    success 'Plugins installed'
}

# setup_gitconfig
PS3='Set up for which location: '
options=("Home" "Work" "Other" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Home")
            info "Setting up for Home"
            git_user_name="Edward Larkey"
            git_user_email="edwlarkey@mac.com"
            git_user_signkey="25FE9E4C"
            git_commit_gpgsign="true"
            break
            ;;
        "Work")
            info "Setting up for Work"
            git_user_name="Edward Larkey"
            git_user_email="edward.larkey@hudl.com"
            git_user_signkey="C9B5BD06E15C39DC"
            git_commit_gpgsign="true"
            break
            ;;
        "Other")
            info "Setting up for Other"
            IFS= read -r -p "What is your github user name? " git_user_name
            IFS= read -r -p "What is your github user email? " git_user_email
            git_user_signkey=""
            git_commit_gpgsign="false"
            break
            ;;
        "Quit")
            exit 1
            ;;
        *) echo invalid option;;
    esac
done

make_dirs
setup_gitconfig
link_files
pull_submodules
install_vim_plugins
